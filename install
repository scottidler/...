#!/bin/bash

if [ "$0" == "bash" ]; then
    echo "cloning scottidler/..."
    git clone --depth 1 ssh://git@github.com/scottidler/...
    cd ...
    git checkout master
    git pull
    exec ./install
fi

cd "`dirname "$0"`"

SUDO=$([[ `uname` == *"BSD"* ]] && echo "doas" || echo "sudo")

# A POSIX variable
# Reset in case getopts has been used previously in the shell.
OPTIND=1

# Initialize our own variables:

LIST=false
NERF=false
UPDATE=false
VERBOSE=false
SECTION=""
PROMPT=""

MANIFEST="manifest.cfg"
PKG=()
PPA=()
APT=()
DNF=()
PIP2=()
PIP3=()
GIT=()
NPM=()

function run() {
    #if $NERF || $VERBOSE; then
    if [[ -n "$PROMPT" ]]; then
        echo "$PROMPT $@"
        if $NERF;  then
            return
        fi
    fi
    "$@"
}

function realpath() {
    echo "$(cd "$(dirname "$1")"; pwd)/$(basename "$1")"
}

function show() {
    local VAR=$1[@]
    if [ -n "${!VAR[@]}" ]; then
        echo "$1 ="
    fi
    for var in ${!VAR}; do
        echo "    $var"
    done
}

while getopts "h?lnuvs:" opt; do
    case "$opt" in
    h|\?)
        usage
        ;;
    l)  LIST=true
        echo "LIST true"
        ;;
    n)  NERF=true
        PROMPT="nerf>"
        echo "NERF true"
        ;;
    u)  UPDATE=true
        echo "UPDATE true"
        ;;
    v)  VERBOSE=true
        PROMPT="run>"
        echo "VERBOSE true"
        ;;
    s)  SECTION=$OPTARG
        echo "SECTION=$SECTION"
        ;;
    esac
done

shift $((OPTIND-1))
[ "$1" = "--" ] && shift

while IFS=$'\n' read line; do
    line="${line//[[:space:]]/}"
    if [ -z "$line" ]; then
        continue
    fi

    if [[ $line == \[*] ]]; then
        IFS="[]"
        set $line
        section=$2
        unset var
        unset val
        continue
    elif [ -n "$SECTION" ] && [ -n "$section" ]; then
        if ! [[ "$section" =~ "$SECTION" ]]; then
            echo "skipping section $section"
            continue
        fi
    fi

    if [[ "$line" =~ "=" ]]; then
        IFS="="
        set $line
        var=$1
        val=$2
    else
        val=$line
    fi

    if [ -n "$val" ]; then
        case $var in
        pkg) PKG+=($val) ;;
        ppa) hash apt-get 2> /dev/null && PPA+=($val) ;;
        apt) hash apt-get 2> /dev/null && APT+=($val) ;;
        dnf) hash dnf 2> /dev/null && DNF+=($val) ;;
        pip2) hash pip2 2> /dev/null && PIP2+=($val) ;;
        pip3) hash pip3 2> /dev/null && PIP3+=($val) ;;
        git) hash git 2> /dev/null && GIT+=($val) ;;
        npm) hash npm 2> /dev/null && NPM+=($val) ;;
        esac
    fi
done < $MANIFEST

if $LIST || $VERBOSE; then
    show "PKG"
    show "PPA"
    show "APT"
    show "DNF"
    show "PIP2"
    show "PIP3"
    show "GIT"
    show "NPM"
    if $LIST; then
        exit 1
    fi
fi

echo "creating symlinks..."
IFS=$' \t\n'
for file in `find root/ -type f && find root/ -type l`; do
    link="${file#root*}"
    link="${link/USER/${USER}}"
    file=`realpath $file`
    if [ -f "$link" ] && [ "$file" != "`readlink $link`" ]; then
        orig="$link.orig"
        echo "backing up $orig"
        run mv $link $orig
    elif [ ! -f "$link" ] && [ -L "$link" ]; then
        echo "removing broken link $link"
        run unlink $link
    fi
    if [ -f "$link" ]; then
        echo "[exists] $link"
    else
        echo "[create] $link -> $file"
        run mkdir -p `dirname $link`; ln -s $file $link
    fi
done
echo

echo "checking out repos..."
mkdir -p repos
for git in "${GIT[@]}"; do
    [ -d "repos/$git" ] || run git clone https://github.com/$git repos/$git
    (cd repos/$git && pwd && run git pull && run git checkout HEAD)
done
echo

if hash apt-get 2> /dev/null; then
    echo "installing ppas..."
    run $SUDO apt-get update && $SUDO apt-get upgrade -y
    run $SUDO apt-get install -y software-properties-common

    for ppa in "${PPA[@]}"; do
        ppas=`find /etc/apt/ -name *.list | xargs cat | grep  ^[[:space:]]*deb | grep -v deb-src`
        if [[ $ppas != *"$ppa"* ]]; then
            run $SUDO add-apt-repository -y "ppa:$ppa"
        fi
    done
    echo
    echo "installing apt-get packages..."
    [ ${#PPA[@]} -eq 0 ] || run $SUDO apt-get update -y
    [ ${#PKG[@]} -eq 0 ] || run $SUDO apt-get install -y "${PKG[@]}"
    [ ${#APT[@]} -eq 0 ] || run $SUDO apt-get install -y "${APT[@]}"
    echo
elif hash dnf 2> /dev/null; then
    echo "installing yum/dnf packages..."
    run $SUDO dnf update -y
    [ ${#PKG[@]} -eq 0 ] || run $SUDO dnf install -y "${PKG[@]}"
    [ ${#DNF[@]} -eq 0 ] || run $SUDO dnf install -y "${DNF[@]}"
    echo
fi

if hash pip2 2> /dev/null && [ ${#PIP2[@]} -ne 0 ]; then
    echo "installing pip2 packages..."
    run $SUDO -H pip2 install --upgrade pip
    run $SUDO -H pip2 install --upgrade setuptools
    run $SUDO -H pip2 install --upgrade "${PIP2[@]}"
    echo
fi

if hash pip3 2> /dev/null && [ ${#PIP3[@]} -ne 0 ]; then
    echo "installing pip3 packages..."
    run $SUDO -H pip3 install --upgrade pip
    run $SUDO -H pip3 install --upgrade setuptools
    run $SUDO -H pip3 install --upgrade "${PIP3[@]}"
    echo
fi

if hash npm 2> /dev/null; then
    echo "installing npm packages..."
    [ ${#NPM[@]} -eq 0 ] || run $SUDO npm install -g "${NPM[@]}"
    echo
fi

if [ -d ~/.ssh ]; then
    echo "fixing up perms for ssh..."
    run $SUDO chmod -R 700 ~/.ssh
    run $SUDO chmod 600 ~/.ssh/config
    for id in "home work"; do
        key=~/.ssh/identities/$id/id_rsa
        [ -f "$key" ] && run $SUDO chmod 600 "$key"
        [ -f "$key.pub" ] && run $SUDO chmod 644 "$key.pub"
    done
    echo "done"
fi

if $UPDATE; then
    echo "running ~/bin/update..."
    run ~/bin/update
fi

echo "removing dead symlinks..."
run ~/bin/dbsl ~
run ~/bin/dbsl ~/bin

run source ~/.bashrc

exit 0

