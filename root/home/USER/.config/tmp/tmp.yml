kinds:
    sh-header:
        chmod: 775
        suffix: sh
        content: |
            {sh-header}

    bash-header:
        chmod: 775
        suffix: sh
        content: |
            {bash-header}

    py2:
        chmod: 664
        suffix: py
        content: |
            {py2-header}

    py3:
        chmod: 664
        suffix: py
        content: |
            {py3-header}

    py:
        chmod: 775
        suffix: py
        content: |
            {py3-header}
            {py-common}
            def main(args):
                print(args)

            {py-footer}

    sh:
        chmod: 775
        suffix: sh
        content: |
            {sh-header}
            {shell-debug}
            {shell-common}

    zsh:
        chmod: 775
        suffix: sh
        content: |
            {zsh-header}
            {shell-debug}
            {shell-common}

    cfg:
        chmod: 664
        suffix: cfg
        content: |
            {cfg-ini}

    ini:
        chmod: 664
        suffix: ini
        content: |
            {cfg-ini}

    bash:
        chmod: 775
        suffix: sh
        content: |
            {bash-header}
            {shell-debug}
            {shell-common}

    yaml:
        chmod: 664
        suffix: yml
        content: |
            firstname: scott
            lastname: idler
            age: 43

    docopt:
        chmod: 775
        suffix: py
        content: |
            {py3-header}
            """Naval Fate.

            Usage:
              naval_fate.py ship new <name>...
              naval_fate.py ship <name> move <x> <y> [--speed=<kn>]
              naval_fate.py ship shoot <x> <y>
              naval_fate.py mine (set|remove) <x> <y> [--moored | --drifting]
              naval_fate.py (-h | --help)
              naval_fate.py --version

            Options:
              -h --help     Show this screen.
              --version     Show version.
              --speed=<kn>  Speed in knots [default: 10].
              --moored      Moored (anchored) mine.
              --drifting    Drifting mine.

            """
            from docopt import docopt

            def main(args):
                arguments = docopt(__doc__, version='Naval Fate 2.0')
                print(arguments)

            {py-footer}

    ap:
        chmod: 775
        suffix: py
        content: |
            {py3-header}
            {py-common}
            from argparse import ArgumentParser

            def main(args):
                parser = ArgumentParser()
                parser.add_argument(
                    '-C', '--config',
                    default=[
                        '~/.config/'+SCRIPT_NAME+'/'+SCRIPT_NAME+'.cfg',
                        SCRIPT_PATH+'/'+SCRIPT_NAME+'.cfg',
                    ],
                    help='default=%(default)s; specify the config path')
                parser.add_argument(
                    '--opt1',
                    default='opt1_val',
                    help='help for optional argument 1')
                parser.add_argument(
                    'pos1',
                    help='help for positional argument 1')

                ns = parser.parse_args()
                print(ns)

            {py-footer}

    ap-yaml:
        chmod: 775
        suffix: py
        content: |
            {py3-header}
            {py-common}
            NAME, EXT = os.path.splitext(SCRIPT_NAME)

            from ruamel import yaml
            from argparse import ArgumentParser, RawDescriptionHelpFormatter

            def main(args=None):
                parser = ArgumentParser(
                    description=__doc__,
                    formatter_class=RawDescriptionHelpFormatter,
                    add_help=False)
                parser.add_argument(
                    '--config',
                    metavar='FILEPATH',
                    default='~/.config/%(NAME)s/%(NAME)s.yml' % globals(),
                    help='default="%(default)s"; config filepath')
                ns, rem = parser.parse_known_args(args)
                try:
                    config = yaml.safe_load(open(ns.config))
                except FileNotFoundError as er:
                    config = dict()
                parser = ArgumentParser(
                    parents=[parser])
                parser.set_defaults(**config)
                parser.add_argument(
                    '--firstname',
                    help='default="%(default)s"; first name')
                parser.add_argument(
                    '--lastname',
                    help='default="%(default)s"; last name')
                parser.add_argument(
                    '--age',
                    help='default="%(default)s"; age')
                ns = parser.parse_args(rem)
                print(ns)

            {py-footer}

templates:
    py2-header: |
        #!/usr/bin/env python2
        # -*- coding: utf-8 -*-

    py3-header: |
        #!/usr/bin/env python3
        # -*- coding: utf-8 -*-

    sh-header: |
        #!/bin/sh

    zsh-header: |
        #!/bin/zsh

    bash-header: |
        #!/bin/bash

    shell-debug: |
        if [ -n "$DEBUG" ]; then
            PS4=':${LINENO}+'
            set -x
        fi

    cfg-ini: |
        [person]
        name: Ripley
        age: 43
    shell-common: |
        SCRIPT_FILE="$0"
        SCRIPT_NAME="$(basename "$SCRIPT_FILE")"
        SCRIPT_PATH="$(dirname "$SCRIPT_FILE")"
        [ -n "$VERBOSE" ] && echo "SCRIPT_FILE=$SCRIPT_FILE"
        [ -n "$VERBOSE" ] && echo "SCRIPT_NAME=$SCRIPT_NAME"
        [ -n "$VERBOSE" ] && echo "SCRIPT_PATH=$SCRIPT_PATH"
        if [ -L "$0" ]; then
            REAL_FILE="$(readlink "$0")"
            REAL_NAME="$(basename "$REAL_FILE")"
            REAL_PATH="$(dirname "$REAL_FILE")"
            [ -n "$VERBOSE" ] && echo "REAL_FILE=$REAL_FILE"
            [ -n "$VERBOSE" ] && echo "REAL_NAME=$REAL_NAME"
            [ -n "$VERBOSE" ] && echo "REAL_PATH=$REAL_PATH"
        fi

        echo "name: $0"
        echo "args: $@"

    py-common: |
        import os
        import re
        import sys
        sys.dont_write_bytecode = True

        SCRIPT_FILE = os.path.abspath(__file__)
        SCRIPT_NAME = os.path.basename(SCRIPT_FILE)
        SCRIPT_PATH = os.path.dirname(SCRIPT_FILE)
        if os.path.islink(__file__):
            REAL_FILE = os.path.abspath(os.readlink(__file__))
            REAL_NAME = os.path.basename(REAL_FILE)
            REAL_PATH = os.path.dirname(REAL_FILE)

        print('name: ', __file__)
        print('args: ', ' '.join(sys.argv[1:]))

    py-footer: |
        if __name__ == '__main__':
            main(sys.argv[1:])

