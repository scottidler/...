# vim: filetype=sh

function int2ip() {
    ifconfig ${1:-wlp2s0} | grep 'inet addr' | sed -e 's/:/ /' | awk '{print $3}'
}

function reponame() {
    REPONAME=`git config --get remote.origin.url | sed -E 's;^(git|ssh|https)://([A-Za-z0-9\-\_]+@)?([A-Za-z0-9\.]+)/;;'`
    echo "${REPONAME%.git}"
}

function gpo() {
    REF=${1:-`git symbolic-ref --short -q HEAD`}
    if [ -z "$REF" ]; then
        echo "REF=$REF; zero length string not allowed"
        exit 1
    fi
    git push -u origin "$REF"
}

function cdp() {
    if `git rev-parse`; then
        REPONAME=`reponame`
        REPOROOT=`git rev-parse --show-toplevel`
        if [[ "$REPOROOT" == *"$REPONAME" ]]; then
            PARENT="${REPOROOT%$REPONAME}"
        else
            PARENT=`dirname $REPOROOT`
        fi
        cd $PARENT
    fi
}

function cdr() {
    if `git rev-parse`; then
        cd `git rev-parse --show-toplevel`
    fi
}

function cdpr() {
    cdr
    if `git rev-parse`; then
        cd ../
    fi
    cdr
}

function upsearch() {
    FILE="$1"
    DIR="$PWD"
    while [[ "$DIR" != '/' ]]; do
        if [[ -e "$DIR/$FILE" ]]; then
            echo "$DIR"
            return
        else
            DIR=`dirname $DIR`
        fi
    done
    echo "$PWD"
    return
}

DOIT="`sudo which doit`"
function doit() {
#    if ! hash $DOIT 2>/dev/null; then
#        echo "doit not found; not installed"
#        return false
#    fi
    (cd "`upsearch dodo.py`" && time "$DOIT" "$@")
}

function dots() {
    cd ~/...; pwd; git pull
    for reponame in $(root/home/USER/bin/ls-git-repos repos); do
        (cd repos/$reponame && pwd && git pull)
    done
}

function clone() {
    cd $(~/bin/clone $1)
}

function toplevel() {
    [ -d "$1" ] && echo "$1" || echo "$(dirname "$1")"
}

function mv-cd() {
    mv "$1" "$2" && cd "$(toplevel "$2")"
}

function cp-cd() {
    cp "$1" "$2" && cd "$(toplevel "$2")"
}

function mkdir-cd() {
    mkdir "$1" && cd "$1"
}

function repo() {
    if [ -z "$1" ]; then
        echo "repo requires a name of a repo to look for"
        false
        return
    fi
    reponames=($(ls-git-repos ~/repos/ | grep "$1"))
    case "${#reponames[@]}" in
        0)
            echo "repo found no matches with term $1"
            false
        ;;
        1)
            cd ~/repos/${reponames[@]}
            true
        ;;
        *)
            echo "repo found too many matches for term $1:"
            for reponame in "${reponames[@]}"; do
                echo $reponame
            done
            false
        ;;
    esac
}
