# vim: filetype=sh

function aws-exec() { #FIXME: gpg and unlock to be investigated
    /usr/bin/gpg -d $HOME/.unlock_gpg.asc 2>/dev/null && \
    aws-vault --debug exec $1 --assume-role-ttl=1h --session-ttl=12h -- /bin/zsh
}

# aws-login <profile> -s
function aws-login { #FIXME: gpg and unlock to be investigated
    /usr/bin/gpg -d $HOME/.unlock_gpg.asc 2>/dev/null && \
    aws-vault --debug login $1 -s --assume-role-ttl=1h --federation-token-ttl=12h
}

#function cdp() {
#    if `git rev-parse`; then
#        REPONAME=`reponame`
#        REPOROOT=`git rev-parse --show-toplevel`
#        if [[ "$REPOROOT" == *"$REPONAME" ]]; then
#            PARENT="${REPOROOT%$REPONAME}"
#        else
#            PARENT=`dirname $REPOROOT`
#        fi
#        cd $PARENT
#    fi
#}
function sls() {
    SLS="$(which serverless)"
    LOCAL="./node_modules/serverless/bin/serverless"
    if [ -f "$LOCAL" ]; then
        SLS="$LOCAL"
    fi
    "$SLS" "$@"
}

function upsearch() {
    FILE="$1"
    DIR="$PWD"
    while [[ "$DIR" != '/' ]]; do
        if [[ -e "$DIR/$FILE" ]]; then
            echo "$DIR"
            return
        else
            DIR=`dirname $DIR`
        fi
    done
    echo "$PWD"
    return
}

DOIT="`sudo which doit`"
function doit() {
#    if ! hash $DOIT 2>/dev/null; then
#        echo "doit not found; not installed"
#        return false
#    fi
    (cd "`upsearch dodo.py`" && time "$DOIT" "$@")
}

function dots() {
    cd ~/...; pwd; git pull
    for reponame in $(root/home/USER/bin/ls-git-repos repos); do
        (cd repos/$reponame && pwd && git pull)
    done
}

function clone() {
    cd $(~/bin/clone $1)
}

function toplevel() {
    [ -d "$1" ] && echo "$1" || echo "$(dirname "$1")"
}

function mv-cd() {
    mv "$1" "$2" && cd "$(toplevel "$2")"
}

function cp-cd() {
    cp "$1" "$2" && cd "$(toplevel "$2")"
}

function mkdir-cd() {
    mkdir "$1" && cd "$1"
}

function repo() {
    if [ -z "$1" ]; then
        echo "repo requires a name of a repo to look for"
        false
        return
    fi
    reponames=($(ls-git-repos ~/repos/ | grep "$1"))
    case "${#reponames[@]}" in
        0)
            echo "repo found no matches with term $1"
            false
        ;;
        1)
            cd ~/repos/${reponames[@]}
            true
        ;;
        *)
            echo "repo found too many matches for term $1:"
            for reponame in "${reponames[@]}"; do
                echo $reponame
            done
            false
        ;;
    esac
}
