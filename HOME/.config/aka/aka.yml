lookups:
  region:
    prod|apps: us-east-1
    staging|test|dev|ops: us-west-2

aliases:

  backup: tar --exclude='**/*[Cc]ache*' -czvf $1-backup.tar.gz $1

  # one-offs
  ntws|nuke-trailing-whitespace: sed -i 's/[[:space:]]*$//' $1
  debug-git: GIT_SSH_COMMAND="ssh -i $WORK_SSH_PUB_KEY -vvv"
  bak: mv $1 $1.bak
  sav: cp $1 $1.sav
  dmesg: sudo dmesg
  calc: fend
  cat: bat -p
  cinema: asciinema
  cl: clear
  ds: dig +short
  e2d: date -d @$1
  email: himalaya
  ex: exercism
  fix-dns: sudo systemd-resolve --flush-caches
  mi: mediainfo
  os: 'echo "$(lsb_release -is)-$(lsb_release -rs)_x$(getconf LONG_BIT)($(lsb_release -cs))"'
  pa: pulseaudio
  pe: pyenv
  Pe: pipenv
  pm: pulsemixer
  co: cat .github/CODEOWNERS
  psgrep: 'ps aux | grep -v grep | grep'
  ping10:
    value: ping 10.10.10.
    space: false
  reboot-sound: pulseaudio -k && sudo alsa force-reload
  SS: starship
  tarlist: tar ztvf
  ttv:
    value: tatari-tv
    global: true
  xdo: xdotool
  ls-tatari|ls-ttv: ls-github-repos tatari-tv
  P: cat ~/prompt | xclip -sel clip

  # corrections
  sud|suod|soud: sudo
  vim: nvim
  svim: sudo nvim
  vmi|emacs: vim
  rtx: mise
  old-vim: $(print -r =vim)
  cd..: cd ..
  cd../: cd ..

  # globals
  '|c':
    value: '| xclip -sel clip'
    global: true
  '|C':
    value: '| column'
    global: true
  'p|':
    value: 'xclip -sel clip -o |'
    global: true
  '|b':
    value: '| bash'
    global: true
  '|g':
    value: '| grep'
    global: true
  '|gi':
    value: '| grep -i'
    global: true
  '|g^':
    value: '| grep ^'
    global: true
    space: false
  '|wc':
    value: '| wc -l'
    global: true
  '|l':
    value: '| less -r'
    global: true
  '|h':
    value: '| head -10'
    global: true
  '|t':
    value: '| tail -10'
    global: true
  '|tf':
    value: '| tail -f'
    global: true
  '|b64':
    value: '| base64'
    global: true
  '|b64d':
    value: '| base64 -d'
    global: true
  '|x':
    value: "| xargs -I% bash -c 'echo %; tab2 '"
    global: true
  e2o|comb:
    value: '2>&1'
    global: true
  tee2files:
    value: '> >(tee -a stdout.log) 2> >(tee -a stderr.log >&2)'
    global: true
  LL:
    value: 'LOG_LEVEL='
    space: false
    global: true
  RBT:
    value: RUST_BACKTRACE=1
    global: true
  target-windows:
    value: --target x86_64-pc-windows-gnu
    global: true
  lappy:
    value: ltl-7007
    global: true
  ave:
    value: aws-vault exec --
    global: true
  # apt install deb files
  apt-deb: sudo apt install -f ~/Downloads/
  apt-deb-force: sudo apt -o Dpkg::Options::="--force-overwrite" install -f ~/Downloads/

  # prepend
  pp: prepend $1 $2
  pp-rust: prepend "#![cfg_attr(debug_assertions, allow(unused_imports, unused_variables, unused_mut, dead_code))]" $1

  sorted: bat -p $1 | sort -u > $1.new; mv $1.new $1
  xtract: PDF="$1"; ~/Documents/spanish/cronicas/extract.py $PDF; bat "${PDF%.pdf}.yml"

  ## path
  path: echo $PATH | tr ':' '\n'
  path-sort: echo $PATH | tr ':' '\n' | sort -u

  # otto
  oh: otto --help
  ov: otto --version
  og: otto graph

  # slam
  slame: slam
  ssr: slam sandbox refresh

  ## nixos
  nb: nix-build
  nrs: sudo nix-rebuild switch

  ## etckeeper
  ek: sudo etckeeper
  ekv-log: (cd /etc && sudo etckeeper vcs log)
  ekv-status: (cd /etc && sudo etckeeper vcs status)
  ekv-diff: (cd /etc && sudo etckeeper vcs diff)

  ## rmrf-rs
  bkup: rkvr bkup
  rmrf: rkvr rmrf
  rcvr: rkvr rcvr
  ls-bkup: rkvr ls-bkup
  ls-rmrf: rkvr ls-rmrf
  bkup-rmrf: rkvr bkup-rmrf

  ## kat
  jat: kat json
  Jat: kat json | xclip -sel clip
  jvat: kat java
  Jvat: kat java | xclip -sel clip
  rat: kat rust
  Rat: kat rust | xclip -sel clip
  pat: kat python
  Pat: kat python | xclip -sel clip
  yat: kat yaml
  Yat: kat yaml | xclip -sel clip
  tat: kat toml
  Tat: kat toml | xclip -sel clip
  wat: kat web
  Wat: kat web | xclip -sel clip
  ptns: kat ptns -i $1 | xclip -sel clip

  # ping
  ping-1s|ping-cloudflare: ping 1.1.1.1
  ping-8s: ping 8.8.8.8
  ping-9s: ping 9.9.9.9
  ping-google: ping 142.251.33.110
  ping-google-v6: ping 2607:f8b0:400a:80b::200e

  # cd to common directories
  docs: cd ~/Documents
  down: cd ~/Downloads
  pics: cd ~/Pictures
  vids: cd ~/Videos
  cp-cd: mkdir -p $2 && cp $1 $2 && cd $(toplevel $2)
  mv-cd: mkdir -p $2 && mv $1 $2 && cd $(toplevel $2)
  mkdir-cd: mkdir -p $1 && cd $1
  mkdir: mkdir -p

  extract: ffmpeg -i $1 -vsync 2 '$1_%04d.png'

  # tree
  T: eza --tree -a --long --ignore-glob='.git|__*|tf|.venv|.mypy_cache|target|incremental|node_modules'

  # curl
  clh:
    value: 'curl localhost:'
    space: false

  headers-only: curl -sSL -D - $1 -o /dev/null
  curl-follow: curl $1 -gkLs -o /dev/null -v 2>&1|grep -e '^< HTTP' -e '[L|l]ocation:'
  url-effective: curl -Ls -o /dev/null -w %{url_effective} $1

  # aka
  ah: aka --help
  al: aka ls
  ad: aka daemon
  adr: aka daemon --restart
  aq: aka query
  af: aka freq
  afa: aka freq --all

  # ssh
  home: ssh desk.lan
  work: ssh ltl-7007.lan
  xps: ssh saidler@xps.lan

  # chown / chmod
  mine: sudo chown -R $USER:$USER
  yours: sudo chown -R root:root
  ours: sudo chmod -R 777
  chmodx: sudo chmod +x

  # nordvpn
  nv: nordvpn
  nvl: nordvpn login
  nvc: nordvpn connect
  nvd: nordvpn disconnect
  nvs: nordvpn status

  # rust cli tools
  # ls
  lah: eza -halo --git
  ltr: eza -lro -sold
  ll: eza -alFo
  la: eza -lao
  ls: eza

  # search
  /: rg
  //: rg --hidden

  st: speedtest-rs
  wiki: wiki-tui "$@"

  # clipboard
  clipboard: xclip -sel clip
  pb-copy:
    value: xclip -sel clip
    global: true
  pb-paste: xclip -sel clip -o

  ## ip adresses
  ip-lan: 'ip addr show |grep "inet " |grep -v 127.0.0.1 |head -1 |cut -d" " -f6 |cut -d/ -f1'
  ip-pub|ip-web: curl ifconfig.me

  # cargo (rust)
  carog: cargo #typo fix
  ca: cargo add
  cad: cargo add --dev
  cI: cargo init
  ci: cargo install
  cil: cargo install --list
  cip: cargo install --path .
  cin: cargo info
  cf: cargo fmt
  cc: cargo clippy
  ccf: cargo clippy --fix -- -W clippy::pedantic -W clippy::nursery -W clippy::unwrap_used -W clippy::expect_used
  cfc: cargo fmt && cargo clippy
  cb: cargo build
  cbe: cargo build --example $1
  cbr: cargo build --release
  cbrw: cargo build --release --target=x86_64-pc-windows-gnu
  ce: cargo expand
  cep: cargo expand | awk '/$@/,0'
  ct: cargo test
  cr: cargo run -q --
  crd: RUST_LOG=debug cargo run -q --
  cre: cargo run -q --example $1 --
  crh: cargo run -q -- --help
  crv: cargo run -q -- --version
  cs: cargo search
  cdndo: cargo doc --no-deps --open
  R: rustc
  RL: RUST_LOG=debug
  car: bat -p Cargo.toml
  csm: bat -p src/main.rs
  vsm: vim src/main.rs

  new-rust: cargo init $1; cd $1; vim src/main.rs Cargo.toml

  rli: RUST_LOG=info
  rld: RUST_LOG=debug
  rlw: RUST_LOG=warm
  rle: RUST_LOG=error
  rlt: RUST_LOG=trace

  bump: cargo release patch --execute --no-publish

  slack-gpg: sudo cp ~/Documents/slack.list /etc/apt/sources.list.d/slack.list

  cookie: cookiecutter

  # python
  ipy: ipython
  pip-search: pip_search
  rmpyc: 'find . -name "*.pyc" -print0 | xargs -0 /bin/rm'

  # pip
  pip3: python3 -m pip
  pip3-ii: python3 -m pip install -U --ignore-installed
  spip3: sudo -H python3 -m pip
  spip3-ii: sudo -H python3 -m pip install -U --ignore-installed

  pip3.7: sudo -H python3.7 -m pip
  pip3.7-ii: sudo -H python3.7 -m pip install -U --ignore-installed
  pip3.8: sudo -H python3.8 -m pip
  pip3.8-ii: sudo -H python3.8 -m pip install -U --ignore-installed

  pt: pytest
  m: manifest
  o: otto
  scaf: scaffold

  # git
  grpo: git remote prune origin
  gC: git clone git@github.com:$1 $1
  g: git
  ga: git add
  gb: git branch
  gm: git merge
  gc:
    value: 'git commit -m"'
    space: false
  gcf: git cat-file -p
  gcm: "git checkout $(git rev-parse --abbrev-ref origin/HEAD 2>/dev/null | sed 's@^origin/@@')"
  gd: git diff
  gD: git describe
  gdm: git diff main
  gp: git pull
  gP: git push
  gpo: 'git push -u origin $(git symbolic-ref --short -q HEAD)'
  gpot: 'git push -u origin $(git symbolic-ref --short -q HEAD) --tags'
  gpof: 'git push -u origin $(git symbolic-ref --short -q HEAD) --force-with-lease'
  gs: git status --short
  gbc: git branch --contains
  gco: git checkout
  gcob: git checkout -b
  gcd: git checkout develop
  grp: git rev-parse
  gsh: git show
  gsn: 'git show --notes=*'
  gpP: 'gp && gP'
  gbmm: git branch --merged main
  gbnmm: git branch --no-merged main
  grh: git reset --hard
  grhh: git reset --hard HEAD
  grph: git rev-parse HEAD
  gfbn: git fetch origin +refs/notes/buildno/:refs/notes/buildno
  gfofu: git fetch origin -f -u +refs/heads/*:refs/heads/*
  grloa: git rev-list --objects --all
  grm: git rebase main
  grim: git rebase -i main
  tags: git tag -l
  gl: git log -$1
  reporoot: git rev-parse --show-toplevel
  #refresh: REPONAME=$(reponame); cd ~/repos; rmrf $REPONAME; clone $REPONAME
  branch: git rev-parse --abbrev-ref HEAD
  nearest-tag: git describe --abbrev=0
  merged: git branch -r --sort=committerdate --merged
  no-merged: git branch -r --sort=committerdate --no-merged
  remote-origin-url: git config --get remote.origin.url
  ls-not-git: git ls-files . --ignored --exclude-standard --others
  ls-remote: git ls-remote
  ls-remote-heads: git ls-remote | grep refs/heads/
  ls-remote-branch: 'git ls-remote | grep refs/heads/$(git rev-parse --abbrev-ref HEAD)'
  ls-remote-tag: 'git ls-remote | grep refs/tags/$(git describe --abbrev=0)'
  ls-remote-tags: git ls-remote | grep refs/tags/
  not-on-main: git branch --no-merged main
  set-upstream: 'git branch --set-upstream-to=origin/$(git rev-parse --abbrev-ref HEAD) $(git rev-parse --abbrev-ref HEAD)'
  prune: git remote prune origin
  unstage: git reset HEAD
  clean: git clean -xfd
  describe: 'git describe --match "v*" --abbrev=7'
  rm-tag: git tag -d $1; git push origin :$1
  db: delete-branch

  refresh: find . -maxdepth 2 -type d -name ".git" | xargs -n1 dirname | parallel -j $(nproc) "cd {} && git pull"

  # git submodules
  gsm: git submodule
  gsmu: gsm update
  gsmur: gsm update --remote
  gsmui: 'gsm update --jobs=$((3 * $(nproc))) --init --recursive'

  # ls-{git,github}-repos
  lgr: ls-git-repos
  lghr: ls-github-repos

  # whitespace
  ws|whitespace: whitespace -r

  # yamllint
  yl: yamllint

  # gh cli
  gcs: gh copilot suggest
  gce: gh copilot explain

  gqs: git-quick-stats
  gh-title: gh pr create --title "$(git symbolic-ref --short HEAD | awk -v FS='/' -v OFS='/' '{ gsub(/-/," ",$2) } { print }' | tr '/' ' ')" --reviewer tatari-tv/SRE; gh pr view --web
  av: aws-vault exec -d 12h prod --

  authors|authros: git shortlog -s -n --all --no-merges
  gbp: git-big-picture

  GS: github-setup

  afields: awk -v N=$1 '{sep=""; for (i=N; i<=NF; i++) {printf("%s%s",sep,$i); sep=OFS}; printf("\n")}'

  par: parallel

  # change dir
  cdr: '$(git rev-parse 2>/dev/null) && cd $(git rev-parse --show-toplevel)'
  cdpr: '$(git rev-parse) && {cd ../; cd $(git rev-parse --show-toplevel)}'
  cdp: '$(git rev-parse) && cd $(git rev-parse --show-toplevel) && cd ../'

  # docker
  d: docker
  dc: docker-compose
  dI: docker inspect
  di: 'docker images | (read -r; printf "%s\n" "$REPLY"; sort)'
  dps: 'docker ps | (read -r; printf "%s\n" "$REPLY"; sort)'
  dpsa: 'docker ps -a | (read -r; printf "%s\n" "$REPLY"; sort)'
  dpsaq: docker ps -aq
  drm: docker rm
  drmi: docker rmi
  drit: docker run -it
  deit: docker exec -it
  ls-dangling-images: docker images -q --filter "dangling=true"
  rm-stopped-containers: 'docker rm $(docker ps -q -f "status=exited")'
  rm-dangling-images: 'docker rmi $(docker images -q --filter "dangling=true")'

  # kubectl (k8s)
  k: kubectl
  ka: kubectl apply -f
  kg: kubectl get
  kga: kubectl get all
  kgA: kubectl get all,cert,order,secret,ingress,hr
  kgC: kubectl get crd
  kgp: kubectl get pod
  kgs: kubectl get svc
  kgS: kubectl get secret
  kgd: kubectl get deployment
  kgc: kubectl get certificate
  kgh: kubectl get helmrelease
  kgn: kubectl get namespace
  kgN: kubectl get networkpolicy
  kd: kubectl describe
  kdC: kubectl describe crd
  kdp: kubectl describe pod
  kds: kubectl describe svc
  kdS: kubectl describe secret
  kdd: kubectl describe deployment
  kdc: kubectl describe certificate
  kdv: kubectl describe ingress.voyager.appscode.com
  kD: kubectl delete
  kDC: kubectl delete crd
  kDp: kubectl delete pod
  kDs: kubectl delete svc
  kDS: kubectl delete secret
  kDd: kubectl delete deployment
  kDn: kubectl delete namespace
  kv: kubectl version
  kl: kubectl logs
  ns:
    value: --namespace
    global: true
  oy:
    value: -o -yaml
    global: true

  ctx|context: kubectl config current-context
  ctxs|contexts: kubectl config get-contexts
  update-ctx|update-context: $av aws eks --region lookup:region[$1] update-kubeconfig --name $1 --alias $1 --role-arn arn:aws:iam::878256633362:role/eks-$1-admin
  use-ctx|use-context: kubectl config use-context $1

  # terraform
  tf: terraform
  tfp: terraform plan
  tfa: terraform apply
  tf-fmt: terraform fmt -write=true -diff=true -recursive
  tfpt-gh: terraform plan --target 'github_repository.repos["$1"]'
  tfv: tfvar

  yml-lint: yq -i . $1

  ww: workweek

  # zig
  z: zig

  # aws
  aws-id: 'aws-vault exec -d 12h prod -- aws sts get-caller-identity | jq -r .Account'
  aws-env: 'env | grep AWS_'

  # flatpak
  fp: flatpak
  fpi: flatpak install
  fps: flatpak search
  fpu: flatpak update

  # traceroute
  tr: traceroute

  # linux
  jc: journalctl
  sc: sudo systemctl

  # edit, re-evals
  akas: editor ~/.config/aka/aka.yml; . ~/.zshrc
  bashrc: editor ~/.bashrc; . ~/.bashrc
  zshrc: editor ~/.zshrc; . ~/.zshrc
  aliases: editor ~/.shell-aliases; . ~/.zshrc
  exports: editor ~/.shell-exports; . ~/.zshrc
  functions: editor ~/.shell-functions; . ~/.zshrc

  # update reboot|shutdown
  ureboot: 'update && reboot'
  ushutdown: 'update && shutdown'

  CC: bat -p ~/Documents/.cards/.cc

  # package update
  apt-up|au: |
    sudo apt-get update && \
    sudo apt-get full-upgrade -y && \
    sudo apt-get autoremove -y

  pip-up|pu: |
    python3 -m pip install -U pip &&
    python3 -m pip list --outdated |
    cut -d' ' -f1 |
    grep -vxFf ~/.distutils.pkgs |
    xargs -n1 sudo -H python3 -m pip install -U

  # search for an apt pkg
  as: apt-cache search $1 | grep ^$1

  p: poetry
  pr: poetry run
  pb: poetry build

  # quartz
  qs: npx quartz sync
  qbs: npx quartz build --serve

  #which combos
  follow-which|fw: follow $(which $1)
  cat-which|cw: 'WHICHD=(); for ARG in $(echo "$@"); do WHICHD+=("$(which $ARG)") done; bat "${WHICHD[@]}"'
  vim-which|vw: 'WHICHD=(); for ARG in $(echo "$@"); do WHICHD+=("$(which $ARG)") done; vim "${WHICHD[@]}"'
  printr:
    value: print -r -- =$1
    space: false
